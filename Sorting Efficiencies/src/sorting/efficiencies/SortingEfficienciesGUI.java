/*
Name: Daniel Araujo
Date: 17 Aug 18
Title: Sorting Efficiencies
Purpose: determines the efficiency of different sorting methods by outputting the number of times a method loops, compares and shifts a valie
* measures in milliseconds how long each sorting method lasts
* allows the user to choose how many numbers are in the list
*/

package sorting.efficiencies;

import javax.swing.JTextArea; //imports classes needed to declare JTextAreas (used in the output() method)

public class SortingEfficienciesGUI extends javax.swing.JFrame {

    String strOutput; //declares global string variable strOutput to store the output in the results
    int intLoop, intComparison, intShifted; //declares global integer variables to store the number of times a sorting method loops, compares values, and shifts values, respectively
    double dblStart, dblFinish, dblElapsed; //declares global double variables to store the start, finish, and elapsed time of each sorting method in milliseconds, respectively
    
    /**
     * Creates new form SortingEfficienciesGUI
     */
    public SortingEfficienciesGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btgNumbers = new javax.swing.ButtonGroup();
        btgSortOrder = new javax.swing.ButtonGroup();
        lblTitle = new javax.swing.JLabel();
        lblNumber = new javax.swing.JLabel();
        rdb10 = new javax.swing.JRadioButton();
        rdb100 = new javax.swing.JRadioButton();
        rdb1000 = new javax.swing.JRadioButton();
        rdb5000 = new javax.swing.JRadioButton();
        lblSortOrder = new javax.swing.JLabel();
        rdbAscending = new javax.swing.JRadioButton();
        rdbDescending = new javax.swing.JRadioButton();
        btnSort = new javax.swing.JButton();
        lblOriginal = new javax.swing.JLabel();
        scrOriginal = new javax.swing.JScrollPane();
        txtOriginal = new javax.swing.JTextArea();
        lblSorted = new javax.swing.JLabel();
        scrSorted = new javax.swing.JScrollPane();
        txtSorted = new javax.swing.JTextArea();
        lblResults = new javax.swing.JLabel();
        scrResults = new javax.swing.JScrollPane();
        txtResults = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitle.setFont(new java.awt.Font("Sitka Heading", 1, 24)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(0, 0, 0));
        lblTitle.setText("Sorting Efficiencies");

        lblNumber.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N
        lblNumber.setText("Enter the amount of Numbers in the List:");

        btgNumbers.add(rdb10);
        rdb10.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N
        rdb10.setText("10");

        btgNumbers.add(rdb100);
        rdb100.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N
        rdb100.setText("100");

        btgNumbers.add(rdb1000);
        rdb1000.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N
        rdb1000.setText("1000");

        btgNumbers.add(rdb5000);
        rdb5000.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N
        rdb5000.setText("5000");

        lblSortOrder.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N
        lblSortOrder.setText("Sort Order");

        btgSortOrder.add(rdbAscending);
        rdbAscending.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N
        rdbAscending.setText("Ascending");

        btgSortOrder.add(rdbDescending);
        rdbDescending.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N
        rdbDescending.setText("Descending");

        btnSort.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N
        btnSort.setText("Sort Numbers");
        btnSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortActionPerformed(evt);
            }
        });

        lblOriginal.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N
        lblOriginal.setText("Original Numbers");

        txtOriginal.setEditable(false);
        txtOriginal.setColumns(20);
        txtOriginal.setFont(new java.awt.Font("Sitka Text", 0, 12)); // NOI18N
        txtOriginal.setLineWrap(true);
        txtOriginal.setRows(5);
        txtOriginal.setWrapStyleWord(true);
        scrOriginal.setViewportView(txtOriginal);

        lblSorted.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N
        lblSorted.setText("Sorted Numbers");

        txtSorted.setEditable(false);
        txtSorted.setColumns(20);
        txtSorted.setFont(new java.awt.Font("Sitka Text", 0, 12)); // NOI18N
        txtSorted.setLineWrap(true);
        txtSorted.setRows(5);
        txtSorted.setWrapStyleWord(true);
        scrSorted.setViewportView(txtSorted);

        lblResults.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N
        lblResults.setText("Sort Results");

        txtResults.setColumns(20);
        txtResults.setFont(new java.awt.Font("Sitka Text", 0, 12)); // NOI18N
        txtResults.setRows(5);
        scrResults.setViewportView(txtResults);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSort)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblNumber)
                                .addGap(18, 18, 18)
                                .addComponent(rdb10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rdb100)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rdb1000)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rdb5000))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblSortOrder)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(rdbAscending)
                                            .addComponent(rdbDescending)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblOriginal)
                                            .addComponent(scrOriginal, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblSorted)
                                            .addComponent(scrSorted, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblResults)
                                    .addComponent(scrResults, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdb10)
                    .addComponent(rdb100)
                    .addComponent(rdb1000)
                    .addComponent(rdb5000))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSortOrder)
                    .addComponent(rdbAscending)
                    .addComponent(lblResults))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rdbDescending)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblSorted)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(scrSorted, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSort)
                                .addGap(18, 18, 18)
                                .addComponent(lblOriginal)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(scrOriginal, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(scrResults))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Sort Numbers (btnSort) button must be pressed after a button from both buttons groups (btgNumbers and btgSortOrder) is selected
     * generates a random list of numbers and sorts it using multiple sorting methods - outputs the sorted and unsorted list to the user and the efficiency statistics of each sorting method
     * @param evt - event in which the Sort Numbers (btnSort) button is pressed
     */
    private void btnSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortActionPerformed
        //if statement that executes if one of the buttons from the btgNumbers button group and one of the buttons from the btgSortOrder button group is selected
        if ((rdb10.isSelected() || rdb100.isSelected() || rdb1000.isSelected() || rdb5000.isSelected()) && (rdbAscending.isSelected() || rdbDescending.isSelected())) {
            
            strOutput = ""; //clears the strOutput string variable
            
            if (rdb10.isSelected()) //if statement that executes if the rdb10 radio button is selected
                array(10); //calls on the array() method and passes 10 for the parameter
            if (rdb100.isSelected()) //if statement that executes if the rdb100 radio button is selected
                array(100); //calls on the array() method and passes 100 for the parameter
            if (rdb1000.isSelected()) //if statement that executes if the rdb1000 radio button is selected
                array(1000); //calls on the array() method and passes 1000 for the parameter
            if (rdb5000.isSelected()) //if statement that executes if the rdb5000 radio button is selected
                array(5000); //calls on the array() method and passes 5000 for the parameter
            
            txtResults.setText(strOutput); //outputs strOutput to the txtResults text area informing the user the efficiency statistics of each sorting method
        }
        else //else statement that executes if no button from either the button groups (btgNumbers or btgSortOrder) is selected
            txtOriginal.setText("Please select a Number and a Sort Order."); //outputs to the txtOriginal text area informing the user that they must select a button from both button groups
    }//GEN-LAST:event_btnSortActionPerformed

    /**
     * btnSort button must be pressed as it calls the array() method and passes the integer for the parameter
     * @param x - integer variable that stores the number of integers that are going to be in the list - chosen by the user
     */
    public void array(int x) {
        Integer [] numbers = new Integer[x]; //declares integer array numbers and sets it to have x values
        
        for (int i = 0; i < x; i++) //for statement that runs through all the indexes of the numbers array and adds a random integer
            numbers[i] = (int)Math.floor(Math.random() * 20001 - 10000); //sets the value at index if of the numbers array as a random integer from -10000 to 10000 (inclusive)
        
        output(numbers, txtOriginal); //calls on the output method and passes the numbers array and txtOriginal text area for the parameters
        
        Integer[] selectionArr = numbers.clone(); //declares selectionArr integer array and copies the values from the numbers array to it - used for the selection() method (ensures original numbers array is not changed)
        Integer[] bubbleArr = numbers.clone(); //declares bubbleArr integer array and copies the values from the numbers array to it - used for the bubble() method (ensures original numbers array is not changed)
        Integer[] insertionArr = numbers.clone(); //declares insertionArr integer array and copies the values from the numbers array to it - used for the insertion() method (ensures original numbers array is not changed)
        Integer[] quickArr = numbers.clone(); //declares quickArr integer array and copies the values from the numbers array to it - used for the quick() method (ensures original numbers array is not changed)
        
        selection(selectionArr); //calls on the selection method and passes the selectionArr array for the parameter
        bubble(bubbleArr); //calls on the bubble method and passes the bubbleArr array for the parameter
        insertion(insertionArr); //calls on the insertion method and passes the insertionArr array for the parameter
        
        //due to the quick() method being a recursive method, the timer and initialization of variables must start before the method is called for the first time
        dblStart = System.currentTimeMillis(); //sets the dblStart variable equal to the time in milliseconds - represents the start time of the method
        intLoop = 0; //sets intLoop variable as 0
        intComparison = 0; //sets intComparison variable as 0
        intShifted = 0; //sets intShifted variable as 0 
        quick(quickArr, 0, numbers.length - 1); //calls on the quick method and passes the numbers array, 0 (index of the first value of the array), and numbers.length - 1 (index of the  last value of the array) for the parameters
        dblFinish = System.currentTimeMillis(); //sets the dblFinish variable equal to the time in milliseconds = represents the end time of the method
        dblElapsed = dblFinish - dblStart; //sets dblElapsed variable as the differnce between the dblFinish and dblStart variables - represents how long the method ran for
        results("Quick Sort", intLoop, intComparison, intShifted, dblElapsed); //calls on the results() method and passes "Quick Sort", intLoop, intComparison, intShifted, and dblElapsed for the parameters
    }
    
    
    /**
     * btnSort button must be pressed as it calls on the array() method to generate the array, call the selection() method, and pass the array for the parameter
     * sorts the integers in the array (either ascending or descending, depending on the users selection) using the selection sort algorithm
     * keeps track of how many times the method loops, makes a comparison, and shifts values - efficiency statistics
     * calls on the output() method and passes the N array and the txtSorted text area
     * calls on the results() method and passes the efficiency statistics
     * @param N - integer array that stores the array as it gets sorted
     */
    public void selection(Integer[] N) {
        dblStart = System.currentTimeMillis(); //sets the dblStart variable equal to the time in milliseconds - represents the start time of the method
        intLoop = 0; //sets intLoop variable as 0
        intComparison = 0; //sets intComparison variable as 0
        intShifted = 0; //sets intShifted variable as 0 
        
        for (int i = 0; i < N.length - 1; i++) { //for loop that runs through all the values in the array except for the last index
            intLoop++; //increases intLoop by 1
            for (int j = i + 1; j < N.length; j++) { //for loop that runs through all the values in the array after index i
                if (rdbAscending.isSelected()) { //if statement that executes if the rdbAscending radio button is selected (array will be sorted in ascending order)
                    intComparison++; //increases intComparison by 1
                    if (N[i] > N[j]) { //if statement that executes if the value at index i is greater than the value at index j (greater, smaller)
                        //swaps the values at index i and j in the N array
                        int intTemp = N[i];
                        N[i] = N[j];
                        N[j] = intTemp;
                        intShifted++; //increaes intShifted by 1
                    }
                }
                else if (rdbDescending.isSelected()) { //else if statement that executes if the rdbDescending radio button is selected (array will be sorted in descending order)
                    intComparison++;
                    if (N[i] < N[j]) { //if statement that executes if the value at index i is less than the value at index j (smaller, greater)
                        //swaps the values at index i and j in the N array
                        int intTemp = N[i];
                        N[i] = N[j];
                        N[j] = intTemp;
                        intShifted++; //increaes intShifted by 1
                    }
                }
            }
        }
        
        dblFinish = System.currentTimeMillis(); //sets the dblFinish variable equal to the time in milliseconds = represents the end time of the method
        dblElapsed = dblFinish - dblStart; //sets dblElapsed variable as the differnce between the dblFinish and dblStart variables - represents how long the method ran for
        
        output(N, txtSorted); //calls on the output method and passes the N array and txtSorted text area for the parameters
        
        results("Selection Sort", intLoop, intComparison, intShifted, dblElapsed); //calls on the results() method and passes "Selection Sort", intLoop, intComparison, intShifted, and dblElapsed for the parameters
    }
    
    /**
     * btnSort button must be pressed as it calls on the array() method to generate the array, call the bubble() method, and pass the array for the parameter
     * sorts the integers in the array (either ascending or descending, depending on the users selection) using the bubble sort algorithm
     * keeps track of how many times the method loops, makes a comparison, and shifts values - efficiency statistics
     * calls on the results() method and passes the efficiency statistics
     * @param N - integer array that stores the array as it gets sorted
     */
    public void bubble(Integer[] N) {
        dblStart = System.currentTimeMillis(); //sets the dblStart variable equal to the time in milliseconds - represents the start time of the method
        intLoop = 0; //sets intLoop variable as 0
        intComparison = 0; //sets intComparison as 0
        intShifted = 0; //sets intShifted as 0
        
        int intBottom = N.length - 1; //declares integer variable intBottom and sets it equal to the last index of the array (stores how far up the array the for loop will go)
        boolean blnSwap = true; //declares boolean variable blnSwap and sets it equal to true - stores whether or not the while loop just swapped values in the array
        
        //while loop that executes when blnSwap is true - becomes false when no values are swapped
        while (blnSwap) {
            blnSwap = false; //sest blnSwap variable as false
            intLoop++; //increases intLoop by 1
            for (int j = 0; j < intBottom; j++) { //for loop that runs through all the values in the index up to intBottom
                if (rdbAscending.isSelected()) { //if statement that executes if the rdbAscending radio button is selected (array will be sorted in ascending order)
                    intComparison++; //increases intComparison by 1
                    if (N[j] > N[j+1]) { //if statement that executes if the value at index j is greater than the value next to it (greater, smaller)
                        blnSwap = true; //sets blnSwap variable as true - values were swapped
                        //swaps the values at index j and j+1 in the N array
                        int intTemp = N[j];
                        N[j] = N[j+1];
                        N[j+1] = intTemp;
                        intShifted++; //increaes intShifted by 1
                    }
                }
                if (rdbDescending.isSelected()) { //if statement that executes if the rdbDescending radio button is selected (array will be sorted in descending order)
                    intComparison++; //increases intComparison by 1
                    if (N[j] < N[j+1]) { //if statement that executes if the value at index j is less than the value next to it (smaller, greater)
                        blnSwap = true; //sets blnSwap variable as true - values were swapped
                        //swaps the values at index j and j+1 in the N array
                        int intTemp = N[j];
                        N[j] = N[j+1];
                        N[j+1] = intTemp;
                        intShifted++; //increaes intShifted by 1
                    }
                }
            }
            intBottom--; //decreases intBottom by 1 - for loop pushes the appropriate value to the end, and so, it does not need to be checked again
        }
        
        dblFinish = System.currentTimeMillis(); //sets the dblFinish variable equal to the time in milliseconds = represents the end time of the method
        dblElapsed = dblFinish - dblStart; //sets dblElapsed variable as the differnce between the dblFinish and dblStart variables - represents how long the method ran for
        
        results("Bubble Sort", intLoop, intComparison, intShifted, dblElapsed); //calls on the results() method and passes "Bubble Sort", intLoop, intComparison, intShifted, and dblElapsed for the parameters
    }
    
    /**
     * btnSort button must be pressed as it calls on the array() method to generate the array, call the insertion() method, and pass the array for the parameter
     * sorts the integers in the array (either ascending or descending, depending on the users selection) using the insertion sort algorithm
     * keeps track of how many times the method loops, makes a comparison, and shifts values - efficiency statistics
     * calls on the results() method and passes the efficiency statistics
     * @param N - integer array that stores the array as it gets sorted
     */
    public void insertion(Integer[] N) {
        dblStart = System.currentTimeMillis(); //sets the dblStart variable equal to the time in milliseconds - represents the start time of the method
        intLoop = 0; //sets intLoop variable as 0
        intComparison = 0; //sets intComparison variable as 0
        intShifted = 0; //sets intShifted variable as 0
        
        for (int n = 1; n < N.length; n++) { //for loop that runs through all the indexes in the N array
            intLoop++; //increases intLoop by 1
            int j = n; //declares integer variable j and sets it equal to n
            if (rdbAscending.isSelected()) { //if statement that executes if the rdbAscending radio button is selected (array will be sorted in ascending order)
                intComparison++; //increases intComparison by 1
                while (j > 0 && N[j-1] > N[j]) { //while loop that executes when j is greater than or equal to 0 or the value at j is less than the value at j-1 (greater, smaller) - exits when sorted
                    //swaps the values at index j and j-1 in the N array
                    int intTemp = N[j];
                    N[j] = N[j-1];
                    N[j-1] = intTemp;
                    j--; //decreases the value of j by 1 - checks every pair from index j to 0
                    intShifted++; //increaes intShifted by 1
                }
            }
            else if (rdbDescending.isSelected()) { //else if statement that executes if the rdbDescending radio button is selected (array will be sorted in descending order)
                intComparison++; //increases intComparison by 1
                while (j > 0 && N[j-1] < N[j]) { //while loop that executes when j is greater than or equal to 0 or the value at j is greater than the value at j-1 (smaller, greater) - exits when sorted
                    //swaps the values at index j and j-1 in the N array
                    int intTemp = N[j];
                    N[j] = N[j-1];
                    N[j-1] = intTemp;
                    j--; //decreases the value of j by 1 - checks every pair from index j to 0
                    intShifted++; //increaes intShifted by 1
                }
            }
        }
        
        dblFinish = System.currentTimeMillis(); //sets the dblFinish variable equal to the time in milliseconds = represents the end time of the method
        dblElapsed = dblFinish - dblStart; //sets dblElapsed variable as the differnce between the dblFinish and dblStart variables - represents how long the method ran for
        
        results("Insertion Sort", intLoop, intComparison, intShifted, dblElapsed); //calls on the results() method and passes "Insertion Sort", intLoop, intComparison, intShifted, and dblElapsed for the parameters
    }
    
    /**
     * btnSort button must be pressed as it calls on the array() method to generate the array, call the quick() method, and pass the array, the first index of the array, and the last index of the array for the parameters
     * sorts the integers in the array (either ascending or descending, depending on the users selection) using the quick sort algorithm
     * uses a recursive method
     * keeps track of how many times the method loops, makes a comparison, and shifts values - efficiency statistics
     * calls on the results() method and passes the efficiency statistics
     * @param N - integer array that stores the array as it gets sorted
     * @param p - integer variable that stores the first index value of the array range
     * @param r - integer variable that stores the last index value of the array range
     */
    public void quick(Integer[] N, int p, int r) {
        //if statement that executes if r is greater than p - array has more than 1 value (not done being sorted)
        if (r > p) {
            int j = partition(N, p, r); //calls on the partition() method and passes the N array, p, and r for the parameter and sets it equal to integer variable j - stores the index value of the pivot point
            quick(N, p, j-1); //calls on the quick() method and passes the N array, p, and j-1 for the parameter - recursive method that narrows down the array (contains values that are less than j)
            quick(N, j+1, r); //calls on the quick() method and passes the N array, j+1, and r for the parameter - recursive method that narrows down the array (contains values that are greater than j)
        }
        
    }
    
    /**
     * the quick() method must execute and pass the N array, the starting point p, and the ending point r for the parameters
     * declares a pivot point and puts all the values that are greater than it on one side and less than it on the other (depends whether ascending or descending)
     * keeps track of how many times the method loops, makes a comparison, and shifts values - efficiency statistics
     * returns the index of the pivot point after the values have been sorted to its right or left
     * @param N - integer array that stores the array as it gets sorted (array is narrowed done for each recursion)
     * @param p - integer variable that stores the first index value of the array range
     * @param r - integer variable that stores the last index value of the array range
     * @return - returns integer variable j that stores the index of the pivot point
     */
    public int partition(Integer[] N, int p, int r) {
        int i = p; //declares i and sets it equal to the first index of the array range
        int j = r + 1; //declares j and sets it equal to the last index of the array range plus 1
        int pivot = N[p]; //declares integer variable pivot and stores the value at the first index of the array range
        
        //do while loop that executes when i is less than j - exits when goes through the array and to the variables pass each other
        do {
            intLoop++; //increases intLoop by 1
            if (rdbAscending.isSelected()) { //if statement that executes if the rdbAscending radio button is selected (array will be sorted in ascending order)
                do { //do while loop that executes when the value in the array at index i is less than the pivot
                    intComparison++; //increases intComparison by 1
                    i++; //increases the value of i by 1
                    if (i == N.length-1) //if statement that executes if i reaches the last index (solves issue where the first value was the lowest value so that do while loop would run until it was out of range
                        break; //exits the do while loop
                }
                while (N[i] < pivot);
                do { //do while loop that executes when the value at index j is greater than the pivot
                    intComparison++; //increases intComparison by 1
                    j--; //decreases thevalue of j by 1
                }
                while (N[j] > pivot);
                }
            else if (rdbDescending.isSelected()) { //if statement that executes if the rdbDescending radio button is selected (array will be sorted in descending order)
                do { //do while loop that executes when the value in the array at index i is greater than the pivot
                    intComparison++; //increases intComparison by 1
                    i++; //increases the value of i by 1
                    if (i == N.length-1) //if statement that executes if i reaches the last index (solves issue where the first value was the lowest value so that do while loop would run until it was out of range
                        break; //exits the do while loop
                }
                while (N[i] > pivot);
                do { //do while loop that executes when the value at index j is greater than the pivot
                    intComparison++; //increases intComparison by 1
                    j--; //decreases thevalue of j by 1
                }
                while (N[j] < pivot);
                }
            if (i < j) { //if statement that executes if i is less than j
                //swaps the values at index i and j in the N array
                int intTemp = N[j];
                N[j] = N[i];
                N[i] = intTemp;
                intShifted++; //increaes intShifted by 1
            }
        }
        while (i < j);
        //swaps the values at index i and p (pivot) in the N array - puts the pivot value at the index where all the values that are greater than it are on one side and all the values that are less than it are on the other side
        int intTemp = N[j];
        N[j] = N[p];
        N[p] = intTemp;
        intShifted++; //increaes intShifted by 1
        return j; //returns j - index in the N array where the pivot point is
    }
    
    /**
     * output() method must be called and an array and JTextArea must be passed for the parameters
     * outputs the array in the JTextArea
     * @param N - integer array that stores the values that will be listed
     * @param list - JTextArea that will output the list
     */
    public void output(Integer[] N, JTextArea list) {
        String strOutput = ""; //declares string variable strOutput and sets it equal to ""
        for (int i = 0; i < N.length; i++) //for loop that runs through all the indexes of the array
            strOutput += N[i] + "\n"; //adds the value at index i to the strOutput variable with a break line escape sequence
        list.setText(strOutput); //outputs strOutput to the list text area
    }
    
    /**
     * results() method must be called and a string variable, three integer variables, and a double variable must be passed for the parameters
     * adds the parameters along with some text representing the efficiency statistics to the strOutput variable
     * @param sort - string variable that stores the sorting method
     * @param loop - integer variable that stores how many times the sorting method looped
     * @param comparison - integer variable that stores how many comparisons were made in the sorting method
     * @param shifted - integer variable that stores how many values were shifted in the sorting method
     * @param ms - double variable that stores how long, in milliseconds, the sorting method took to execute
     */
    public void results(String sort, int loop, int comparison, int shifted, double ms) {
        strOutput += sort + "\n" //adds the string variable sort and a new line escape sequence to the strOutput variable
                + "Number of times the loop was executed: " + loop + "\n" //adds the text along with the loop variable and a new line escape sequence to the strOutput variable
                + "Number of times a comparison was made: " + comparison + "\n" //adds the text along with the comparison variable and a new line escape sequence to the strOutput variable
                + "Number of times a value was shifted: " + shifted + "\n" //adds the text along with the shifted variable and a new line escape sequence to the strOutput variable
                + "Number of milliseconds to complete sort: " + ms + "\n"; //adds the text along with the ms variable and a new line escape sequence to the strOutput variable
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SortingEfficienciesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SortingEfficienciesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SortingEfficienciesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SortingEfficienciesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SortingEfficienciesGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btgNumbers;
    private javax.swing.ButtonGroup btgSortOrder;
    private javax.swing.JButton btnSort;
    private javax.swing.JLabel lblNumber;
    private javax.swing.JLabel lblOriginal;
    private javax.swing.JLabel lblResults;
    private javax.swing.JLabel lblSortOrder;
    private javax.swing.JLabel lblSorted;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JRadioButton rdb10;
    private javax.swing.JRadioButton rdb100;
    private javax.swing.JRadioButton rdb1000;
    private javax.swing.JRadioButton rdb5000;
    private javax.swing.JRadioButton rdbAscending;
    private javax.swing.JRadioButton rdbDescending;
    private javax.swing.JScrollPane scrOriginal;
    private javax.swing.JScrollPane scrResults;
    private javax.swing.JScrollPane scrSorted;
    private javax.swing.JTextArea txtOriginal;
    private javax.swing.JTextArea txtResults;
    private javax.swing.JTextArea txtSorted;
    // End of variables declaration//GEN-END:variables
}
